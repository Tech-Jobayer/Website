// üîî ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶´‡¶æ‡¶Ø‡¶º‡¶æ‡¶∞‡¶¨‡ßá‡¶∏ ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
const firebaseConfig = {
  apiKey: "AIzaSyAC4h55aA0Zz--V5ejyndzR5WC_-9rAPio",
  authDomain: "subscribe-bot-6f9b2.firebaseapp.com",
  databaseURL: "https://subscribe-bot-6f9b2-default-rtdb.firebaseio.com",
  projectId: "subscribe-bot-6f9b2",
  storageBucket: "subscribe-bot-6f9b2.appspot.com",
  messagingSenderId: "141787931031",
  appId: "1:141787931031:web:2108a3e930f5ce4fbc64d2"
};

// ‡¶´‡¶æ‡¶Ø‡¶º‡¶æ‡¶∞‡¶¨‡ßá‡¶∏ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
firebase.initializeApp(firebaseConfig);
const database = firebase.database();
const submitBtn = document.getElementById('submitBtn');

// --- YouTube API Config ---
const YOUTUBE_API_KEY = "AIzaSyD5wCkpL3LghaFrBf3YxGQ8I1ig1wbSn3A"; // üö® ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶è‡¶™‡¶ø‡¶Ü‡¶á ‡¶ï‡ßÄ ‡¶¨‡¶∏‡¶æ‡¶®

/**
 * URL ‡¶•‡ßá‡¶ï‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¨‡¶æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá‡•§
 * @param {string} url - The YouTube channel URL.
 * @returns {string|null}
 */
function getIdentifierFromUrl(url) {
    // ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶æ‡¶∞‡ßç‡¶° URL ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü: /channel/UC...
    let match = url.match(/\/channel\/([a-zA-Z0-9_-]{24})/);
    if (match) return match[1];

    // ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ URL: /@username, /c/username, /user/username
    match = url.match(/\/(?:@|c\/|user\/)([a-zA-Z0-9_.-]+)/);
    if (match) return match[1];
    
    return null;
}

/**
 * ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶è‡¶™‡¶ø‡¶Ü‡¶á ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá‡•§
 * @param {string} identifier - The custom username from the URL.
 * @returns {Promise<string|null>}
 */
async function fetchChannelIdFromAPI(identifier) {
    const apiUrl = `https://www.googleapis.com/youtube/v3/search?part=id&q=${encodeURIComponent(identifier)}&type=channel&key=${YOUTUBE_API_KEY}`;
    try {
        const response = await fetch(apiUrl);
        const data = await response.json();
        if (data.items && data.items.length > 0) {
            return data.items[0].id.channelId; // ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
        }
        return null;
    } catch (error) {
        console.error("YouTube API error:", error);
        return null;
    }
}

// --- ‡¶Æ‡ßÇ‡¶≤ ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
submitBtn.addEventListener('click', async function () {
    const url = document.getElementById('channelUrl').value.trim();
    const count = document.getElementById('subscriberCount').value;
    const title = document.getElementById('taskTitle').value.trim();
    const desc = document.getElementById('taskDescription').value.trim();

    if (!url || !count || !title || !desc) {
        alert('‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶¨ ‡¶ò‡¶∞ ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§');
        return;
    }
    
    submitBtn.disabled = true;
    submitBtn.textContent = '‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...';

    const identifier = getIdentifierFromUrl(url);
    if (!identifier) {
        alert('‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¶‡¶ø‡¶®‡•§');
        submitBtn.disabled = false;
        submitBtn.textContent = '‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®';
        return;
    }

    let finalChannelId = null;
    let isIdFromCache = false;

    // ‡ßß. ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶®‡¶ø‡¶ú‡¶∏‡ßç‡¶¨ ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
    const cacheRef = database.ref(`allChannelIds/${identifier}`);
    const snapshot = await cacheRef.once('value');

    if (snapshot.exists()) {
        finalChannelId = snapshot.val(); // ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶á‡¶°‡¶ø ‡¶®‡¶ø‡¶®
        isIdFromCache = true;
        console.log("‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§");
    } else {
        // ‡ß®. ‡¶Ø‡¶¶‡¶ø ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶¨‡ßá‡¶á API ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
        console.log("‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶Ü‡¶á‡¶°‡¶ø ‡¶®‡ßá‡¶á, API ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...");
        if (identifier.startsWith('UC')) {
             finalChannelId = identifier; // ‡¶Ø‡¶¶‡¶ø ‡¶∂‡¶®‡¶æ‡¶ï‡ßç‡¶§‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶®‡¶ø‡¶ú‡ßá‡¶á ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶á‡¶°‡¶ø ‡¶π‡ßü
        } else {
             finalChannelId = await fetchChannelIdFromAPI(identifier);
        }
    }
    
    if (!finalChannelId) {
        alert('‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§');
        submitBtn.disabled = false;
        submitBtn.textContent = '‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®';
        return;
    }
    
    submitBtn.textContent = '‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...';

    const newTaskRef = database.ref('tasks').push();
    const newTaskId = newTaskRef.key;

    const taskData = {
        taskId: newTaskId,
        channelId: finalChannelId,
        title: title,
        description: desc,
        link: `https://www.youtube.com/channel/${finalChannelId}`,
        completed: 0,
        max: Number(count),
        createdAt: new Date().toISOString()
    };
    
    const updates = {};
    updates[`/tasks/${newTaskId}`] = taskData; // ‡¶®‡¶§‡ßÅ‡¶® ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü ‡¶∏‡ßá‡¶≠ ‡¶π‡¶¨‡ßá

    // ‡ß©. ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶á‡¶°‡¶ø ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂‡ßá ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶¨‡ßá‡¶á `allChannelIds`-‡¶è ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
    if (!isIdFromCache) {
        updates[`/allChannelIds/${identifier}`] = finalChannelId;
    }

    try {
        await database.ref().update(updates);
        alert('‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‚úÖ');
        // ‡¶´‡¶∞‡ßç‡¶Æ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü
        document.getElementById('channelUrl').value = '';
        document.getElementById('subscriberCount').value = '10';
        document.getElementById('taskTitle').value = '';
        document.getElementById('taskDescription').value = '';

    } catch (error) {
        console.error("‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá:", error);
        alert('‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§! ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§');
    } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = '‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®';
    }
});